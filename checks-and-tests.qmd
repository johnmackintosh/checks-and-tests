---
title: "checks and tests"
author: "John MacKintosh"
format: html
---

## Checking and testing - a very quick primer

### Checks

-   What assumptions are you making about your data? (structure, names, types etc.)
-   function arguments
-   what users will and won't do

### Tests

Describe what you expect your functions to do, and how they should behave with regards to user inputs

Checks : assertions  
Tests : expectations  

```{r}
#| echo: false
#| warning: false
#| message: false
library(checkmate)
library(tinytest)
```

Let's write a simple function that prints the name of a council area:

```{r}
#| eval: false

choose_council <- function(x){
  out <- paste("chosen council is", x)
  out
}
```

```{r}
#| echo: false

choose_council <- function(x){
  out <- paste("chosen council is", x)
  out
}
```

Now let's try it out

```{r}
choose_council("Highland")
```

```{r}
choose_council("Argyll and Bute")
```

```{r}
choose_council("Bob")
```

```{r}
choose_council(1)
```

```{r}

choose_council("Argyll & Bute")
```

We can see the function works, but...

## Base R functions

From the help: `match.arg` matches a character arg against a table of candidate values as specified by choices.


![When the help is no help](https://user-images.githubusercontent.com/3278367/232798629-5098186f-b70a-4fc8-9504-e71d2d772846.jpg){fig-align="left"}

Let's assume we only want to print `Highland` and `Argyll and Bute`

How can we use `match.arg`?

```{r}
#| eval: false
choose_council <- function(council = c("Highland", 
                                       "Argyll and Bute")){

  council <-  match.arg(council)
  out <- paste("chosen council is", council)
  return(out)
}
```

```{r}
#| echo: false
choose_council <- function(council = c("Highland", 
                                       "Argyll and Bute")){

  council <-  match.arg(council)
  out <- paste("chosen council is", council)
  return(out)
}

```

```{r}
choose_council("Highland")
```

```{r}
choose_council("Argyll and Bute")
```

```{r}
#| error: true
choose_council("Bob")
```

```{r}
#| error: true
choose_council(1)
```

```{r}
#| error: true
choose_council("Argyll & Bute")
```

if no value supplied, `match.arg` uses the first element

```{r}
choose_council() # match.arg uses default arguments
```


partial matching -  you can be lazy and only type the first few letters.
This is OK for this very simple example, but not for real-life code

```{r}
choose_council("A") # partial matching - can be risky
```


### stopifnot

We saw that our function didn't work when we supplied a number. 

```{r}
#| eval: false

choose_council(1)
```
In this case, `match.arg` has it's own checks in the background. But we can provide our own. We want to stop the function if a non character argument is provided.

We use `stopifnot` to trigger immediately if a non character argument is passed. 

If a character argument is passed, we use the `choices` argument of `match.arg` to validate that this is an acceptable value

```{r}
#| eval: false

choose_council <- function(council){

  stopifnot(is.character(council))
  
   council <-  match.arg(council, 
                         choices = c("Highland", 
                                     "Argyll and Bute"))
  
  out <- paste("chosen council is", council)
  return(out)
}
```


```{r}
#| echo: false

choose_council <- function(council){

  stopifnot(is.character(council))
  
   council <-  match.arg(council, 
                         choices = c("Highland", 
                                     "Argyll and Bute"))
  
  out <- paste("chosen council is", council)
  return(out)
}
```


```{r}
#| error: true
choose_council(1)
```


```{r}
#| error: true
choose_council("Argyll & Bute")
```

Yikes. 

We can add friendlier messages

```{r}
#| eval: false
choose_council <- function(council){

stopifnot("council must be character" = is.character(council))
  
   council <-  match.arg(council, 
                         choices = c("Highland", 
                                     "Argyll and Bute"))
  
  out <- paste("chosen council is", council)
  return(out)
}
```



```{r}
#| echo: false
choose_council <- function(council){

stopifnot("council must be character" = is.character(council))
  
   council <-  match.arg(council, 
                         choices = c("Highland", 
                                     "Argyll and Bute"))
  
  out <- paste("chosen council is", council)
  return(out)
}
```


Partial matching works as before

```{r}
choose_council("High")
```

But now we get a slightly more readable error message
```{r}
#| error: true
choose_council(1)
```


## chi_check()


https://github.com/Public-Health-Scotland/phsmethods/blob/master/R/chi_check.R

What needs to be checked?

 - Does it contain no non-numeric characters?  
 - Is it ten digits in length?  
 - Do the first six digits denote a valid date? 
 - Is the checksum digit correct?

We can deal with the first three quite quickly with `{checkmate}`


## checkmate

https://mllg.github.io/checkmate/articles/checkmate.html

"Virtually every standard type of user error when passing arguments into function can be caught with a simple, readable line which produces an informative error message. 

A substantial part of the package was written in C to minimize any worries about execution time overhead."


example CHI

```{r}
x <- "0101011237"
```

is this a character vector?

```{r}
#| eval: false
check_class(x, "character")
checkClass(x, "character")
```


```{r}
#| echo: false
check_class(x, "character")
checkClass(x, "character")
```


`check_class` and `checkClass` are exactly the same, simply choose whether you prefer `snake_case` or `camelCase`


Functions beginning with `check` return either `TRUE`, (as above) or, the error message

```{r}
#| error: true
check_class(x, "integer")
```


Functions beginning with `assert` either return an error message, or the checked object is returned invisibly:

```{r}
#| error: true
assert_class(x, "integer")
```



```{r}
assert_class(x, "character")
```



Going back to the CHI example, we can use `check_character` for a more fine grained series of checks

```{r}
check_character(x, n.chars = 10, pattern = "\\d{10}") # 10 chars, numeric only
```

```{r}
x2 <- "010101123A"
x3 <- c(x, x2, NA)
x4 <- c(x, NA)
```



```{r}
#| eval: false
check_character(x2, n.chars = 10, pattern = "[^A-Z]{10}")
check_character(x, n.chars = 10, pattern = "[^A-Z]{10}")
```


```{r}
#| echo: false
check_character(x2, n.chars = 10, pattern = "[^A-Z]{10}")
check_character(x, n.chars = 10, pattern = "[^A-Z]{10}")
```





```{r}
#| eval: false
# final version
check_character(x,
                min.len = 1,
                n.chars = 10,
                any.missing = FALSE,
                pattern = "\\d{10}")

```



```{r}
#| warning: false
#| eval: false
vals <- c(x, x2, x3, x4)
cat(vals)
purrr::map_chr(vals,
               check_character,
               min.len = 1,
               n.chars = 10,
               any.missing = FALSE,
               pattern = "\\d{10}")

```


```{r}
#| warning: false
#| eval: true
#| error: true
vals <- c(x, x2, x3, x4)
cat(vals)
purrr::map_chr(vals,
               check_character,
               min.len = 1,
               n.chars = 10,
               any.missing = FALSE,
               pattern = "\\d{10}")
```


```{r}
#| eval: false
# are first 6 elements a Date?
date_val <- substr(x,1,6)
checkDate(as.Date(strptime(date_val,"%d%m%y", "UTC")),
          lower = "1900-01-01",
          upper =  Sys.Date(),
          any.missing = FALSE,
          min.len = 1L)
```



```{r}
date_val <- substr(x,1,6)
checkDate(as.Date(strptime(date_val,"%d%m%y", "UTC")),
          lower = "1900-01-01",
          upper =  Sys.Date(),
          any.missing = FALSE,
          min.len = 1L)
```



## combine checks with the `assert` function


```{r}
#| eval: false
main_check <- function(x){
  assert(check_character(x,
                         min.len = 1,
                         n.chars = 10,
                         any.missing = FALSE,
                         pattern = "\\d{10}"),
         checkDate(as.Date(strptime(substr(x,1,6),"%d%m%y", "UTC")),
                   lower = "1900-01-01",
                   upper =  Sys.Date(),
                   any.missing = FALSE,
                   min.len = 1L),
         combine = "and")
}
```




```{r}
#| echo: false
main_check <- function(x){
  assert(check_character(x,
                         min.len = 1,
                         n.chars = 10,
                         any.missing = FALSE,
                         pattern = "\\d{10}"),
         checkDate(as.Date(strptime(substr(x,1,6),"%d%m%y", "UTC")),
                   lower = "1900-01-01",
                   upper =  Sys.Date(),
                   any.missing = FALSE,
                   min.len = 1L),
         combine = "and")
}
```


```{r}
out <- main_check(x)
out
```




## for the lazy 

- `qassert`  built in data types
- `qassertr` lists and data frames

```{r}
qassert(x,"S+[10,11)") # character, vector length 1, lower bound 10 and less than 11
qassert(x,"S+[10,10]") # also works, between 10 and 10 (inclusive)
# note difference in closing brackets
# character denoted by `s`
# no missing values denoted by UPPER CASE
# exact length of string 10 denoted by [10]
```



### testing

we can use `{tinytest}` for some checks also


```{r}
tinytest::expect_inherits(x, "character")
```


Normally we'd list some expectations
Here's a useless function that adds 2 to a given numerical value


```{r}
add_two <- function(x) {

  if (is.character(x)) {
  stop("You've passed a character vector to this function.\nGonnae no' dae that? \nIt should be an integer or double")
  }

  checkmate::assert_count(x)
  checkmate::assert_integerish(x)
  !checkmate::anyMissing(x)

  x <- x + 2
  message("ya wee beauty!")
  return(x)

}
```



```{r}
using("checkmate")
# test add_two works

expect_equal(1 + 2, add_two(1))


```


```{r}
#| error: true
add_two("one")
```


```{r}
expect_error(add_two("one"))
```


### Also

- defensive programming
- purrr (possibly / safely)
